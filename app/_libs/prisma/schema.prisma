datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Coffee {
  id Int @id @default(autoincrement())

  status      String
  productCode String
  name        String
  country     String

  DeliveryCoffee1 Delivery[] @relation(name: "delivery_to_coffee_1")
  DeliveryCoffee2 Delivery[] @relation(name: "delivery_to_coffee_2")
  DeliveryCoffee3 Delivery[] @relation(name: "delivery_to_coffee_3")
  DeliveryCoffee4 Delivery[] @relation(name: "delivery_to_coffee_4")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionType {
  PRIVATE
  PRIVATE_GIFT
  B2B
}

enum SubscriptionStatus {
  ACTIVE    // RECURRING ORDERS ACTIVE 
  PASSIVE   // ORDERS CAN BE MANUALLY TRIGGERED
  CANCELLED // ORDERS CANNOT BE TRIGGERED
  COMPLETED 
  DELETED
}

enum SubscriptionFrequency {
  MONTHLY
  FORTNIGHTLY
}

model Subscription {
  id Int @id @default(autoincrement())

  type   SubscriptionType
  status SubscriptionStatus

  frequency    SubscriptionFrequency
  quantity250  Int @default(0)
  quantity500  Int @default(0)
  quantity1200 Int @default(0)

  recipientName String @default("")

  customerNote String?
  internalNote String?

  fikenContactId Int? @unique
  giftSubscription GiftSubscription?

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GiftSubscription {
  id Int @id @default(autoincrement())

  durationMonths              Int
  originalFirstDeliveryDate   DateTime
  firstDeliveryDate           DateTime
  customerName                String
  customerNote                String?
  messageToRecipient          String?

  recipientName         String
  recipientEmail        String?
  recipientMobile       String?
  recipientAddress1      String
  recipientAddress2      String?
  recipientPostalCode   String
  recipientPostalPlace  String
  recipientCountry      String?
  
  wooCustomerId      Int?
  wooOrderId         Int?
  wooOrderLineItemId String? @unique
  wooOrderDate       DateTime?

  subscription      Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptionId    Int @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Delivery {
  id Int @id @default(autoincrement())

  date DateTime
  type String

  coffee1     Coffee? @relation(name: "delivery_to_coffee_1", fields: [coffee1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coffee1Id   Int?

  coffee2     Coffee? @relation(name: "delivery_to_coffee_2", fields: [coffee2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coffee2Id   Int?

  coffee3     Coffee? @relation(name: "delivery_to_coffee_3", fields: [coffee3Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coffee3Id   Int?

  coffee4     Coffee? @relation(name: "delivery_to_coffee_4", fields: [coffee4Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coffee4Id   Int?

  Orders      Order[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id Int @id @default(autoincrement())

  productId Int
  variation String
  quantity Int

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  // An order always origin from a subscription

  name        String
  email       String?
  mobile      String?
  address1    String
  address2    String?
  postalCode  String
  postalPlace    String
  countryountry  String?
  
  orderItems OrderItem[]

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptionId Int

  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deliveryId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WooImportResult {
  id Int @id @default(autoincrement())

  result String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// export interface OrderItem {
//   quantity: number;
//   wooProductId: number;
//   wooVariationId: number;
// }

// export interface Order {
//   status: string;
//   shippingName: string;
//   shippingAddress1: string;
//   shippingAddress2: string | undefined;
//   shippingPostcode: string;
//   shippingCity: undefined;
//   shippingCountry: string | undefined;
//   shippingEmail: string | undefined;
//   shippingPhone: string | undefined;
//   customerNote: string | undefined; // COMMENT FROM CUSTOMER - FOR REFERENCE
//   specialRequest: string | undefined; // SPECIFIED BY US - WILL BE USED FOR FILTERING ORDERS THAT NEEDS SPECIAL HANDLING
//   items: Array<OrderItem>;

//   subscriptionRenewal: SUBSCRIPTION_VARIATIONS | null;

//   wooId: number;
//   wooCustomerId: number;
//   wooStatus: string;
//   wooCreatedDate: DateTime;
//   wooUpdatedDate: DateTime;
// }
