datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

enum CoffeeStatus {
  ACTIVE    
  SOLD_OUT   
  IN_STOCK
  ORDERED
  DELETED
}

model Coffee {
  id Int @id @default(autoincrement())

  status      CoffeeStatus
  productCode String
  name        String
  country     String

  DeliveryCoffee1 Delivery[] @relation(name: "delivery_to_coffee_1")
  DeliveryCoffee2 Delivery[] @relation(name: "delivery_to_coffee_2")
  DeliveryCoffee3 Delivery[] @relation(name: "delivery_to_coffee_3")
  DeliveryCoffee4 Delivery[] @relation(name: "delivery_to_coffee_4")

  OrderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionType {
  PRIVATE
  PRIVATE_GIFT
  B2B
}

enum SubscriptionStatus {
  ACTIVE    // RECURRING ORDERS ACTIVE 
  PASSIVE   // ORDERS CAN BE MANUALLY TRIGGERED
  COMPLETED // ORDERS CANNOT BE TRIGGERED
  DELETED
}

enum SubscriptionFrequency {
  MONTHLY
  MONTHLY_3RD
  FORTNIGHTLY
}

model Subscription {
  id Int @id @default(autoincrement())

  type   SubscriptionType
  status SubscriptionStatus

  frequency    SubscriptionFrequency
  quantity250  Int @default(0)
  quantity500  Int @default(0)
  quantity1200 Int @default(0)

  customerNote String?
  internalNote String?
  
  // Set on B2B
  fikenContactId      Int? @unique

  // Set on PRIVATE_GIFT (created from Woo order)
  gift_wooOrderId          Int?
  gift_wooOrderLineItemId  String? @unique
  gift_wooCustomerName     String?
  gift_durationMonths      Int?
  gift_firstDeliveryDate   DateTime?
  gift_messageToRecipient  String?

  orders Order[]

  recipientName         String @default("")
  recipientEmail        String?
  recipientMobile       String?
  recipientAddress1     String
  recipientAddress2     String?
  recipientPostalCode   String
  recipientPostalPlace  String
  recipientCountry      String? 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DeliveryStatus {
  ACTIVE 
  DELETED
}

model Delivery {
  id Int @id @default(autoincrement())

  status DeliveryStatus @default(ACTIVE)

  date DateTime
  type String

  coffee1     Coffee? @relation(name: "delivery_to_coffee_1", fields: [coffee1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coffee1Id   Int?

  coffee2     Coffee? @relation(name: "delivery_to_coffee_2", fields: [coffee2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coffee2Id   Int?

  coffee3     Coffee? @relation(name: "delivery_to_coffee_3", fields: [coffee3Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coffee3Id   Int?

  coffee4     Coffee? @relation(name: "delivery_to_coffee_4", fields: [coffee4Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coffee4Id   Int?

  orders      Order[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  ACTIVE 
  ON_HOLD
  CANCELLED
  COMPLETED 
  DELETED
}

enum OrderType {
  RECURRING 
  NON_RECURRING
  CUSTOM
}

enum OrderShippingType {
  SHIP
  LOCAL_PICK_UP
}

model OrderItem {
  id Int @id @default(autoincrement())

  wooOrderItemId Int? @unique

  variation String
  quantity Int

  coffee Coffee @relation(fields: [coffeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coffeeId Int

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id      Int @id @default(autoincrement())
  status  OrderStatus
  type    OrderType

  wooOrderId  Int? @unique

  name        String
  email       String?
  mobile      String?
  address1    String
  address2    String?
  postalCode  String
  postalPlace String
  country     String?
  
  quantity250 Int?
  quantity500 Int?
  quantity1200 Int?

  customerNote String?
  internalNote String?

  shippingType OrderShippingType?

  orderItems OrderItem[]

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptionId Int

  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deliveryId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WooImportResult {
  id Int @id @default(autoincrement())

  result String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ImportResult {
  id Int @id @default(autoincrement())

  name String
  result String?
  errors String?

  importStartedAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
